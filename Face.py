# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Face.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
import cv2 as cv
import numpy as np
from PIL import Image
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QWidget, QApplication, QStyleFactory, QPushButton, QLineEdit, QCheckBox, QLabel, QSpinBox \
    , QVBoxLayout, QHBoxLayout, QFormLayout, QFrame, QFileDialog, QMessageBox
from PyQt5.QtWidgets import QApplication, QStyleFactory


class TextPicture(QWidget):

    def __init__(self):
        super(TextPicture, self).__init__()
        self.setWindowTitle("图片转文本")
        ico = QIcon("icon.ico")
        self.setWindowIcon(ico)
        self.horizontalLayout_6 = QHBoxLayout(self)
        self.verticalLayout_2 = QVBoxLayout()
        self.pic_show = QLabel(self)
        self.pic_show.setFrameShape(QFrame.Box)
        self.pic_show.setText("")
        self.pic_show.setMinimumWidth(200)
        self.verticalLayout_2.addWidget(self.pic_show)
        self.horizontalLayout_2 = QHBoxLayout()
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.brower_pic = QtWidgets.QPushButton(self)
        self.horizontalLayout_2.addWidget(self.brower_pic)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout_2.setStretch(0, 10)
        self.verticalLayout_2.setStretch(1, 1)
        self.horizontalLayout_6.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.groupBox = QtWidgets.QGroupBox(self)
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setMaximumSize(QtCore.QSize(30, 16777215))
        self.horizontalLayout_5.addWidget(self.label_3)
        self.pic_w = QtWidgets.QSpinBox(self.groupBox)
        self.pic_w.setMaximum(2000)
        self.horizontalLayout_5.addWidget(self.pic_w)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setMaximumSize(QtCore.QSize(30, 16777215))
        self.horizontalLayout_5.addWidget(self.label_2)
        self.pic_h = QtWidgets.QSpinBox(self.groupBox)
        self.pic_h.setMaximum(2000)

        self.pic_w.setValue(500)
        self.pic_h.setValue(500)
        self.horizontalLayout_5.addWidget(self.pic_h)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.issetting = QtWidgets.QCheckBox(self.groupBox)
        self.horizontalLayout_4.addWidget(self.issetting)
        self.words = QtWidgets.QLineEdit(self.groupBox)
        self.horizontalLayout_4.addWidget(self.words)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.verticalLayout.addWidget(self.label_4)
        self.optimization = QCheckBox("如果生成失败请勾选这个")
        self.verticalLayout.addWidget(self.optimization)
        self.auto_open = QCheckBox("生成成功后自动打开")
        self.verticalLayout.addWidget(self.auto_open)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.save_path = QtWidgets.QTextBrowser(self.groupBox)
        self.save_path.setMaximumHeight(100)
        self.horizontalLayout_3.addWidget(self.save_path)
        self.set_save_path = QtWidgets.QPushButton(self.groupBox)
        self.horizontalLayout_3.addWidget(self.set_save_path)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem4)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem5)
        self.verticalLayout_3.addWidget(self.groupBox)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem6)
        self.generate = QtWidgets.QPushButton(self)
        self.horizontalLayout.addWidget(self.generate)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem7)
        self.verticalLayout_3.addLayout(self.horizontalLayout)
        self.verticalLayout_3.setStretch(0, 10)
        self.verticalLayout_3.setStretch(1, 1)
        self.horizontalLayout_6.addLayout(self.verticalLayout_3)

        self.brower_pic.setText("设置图片")
        self.groupBox.setTitle("生成文本设置")
        self.label_3.setText("宽：")
        self.label_2.setText("高：")
        self.issetting.setText("设置文字")
        self.label_4.setText("说明：字越多分辨率越高，越逼真")
        self.set_save_path.setText("设置保存路径")
        self.generate.setText("生成")

        self.brower_pic.clicked.connect(self.set_image_func)
        self.set_save_path.clicked.connect(self.set_save_path_func)
        self.generate.clicked.connect(self.generate_func)
        self.issetting.clicked.connect(self.set_words)

        # 数据段
        self.words_list = []
        self.image_name = None
        self.save_path_text = None

        # 代码部分
    def set_image_func(self):
        try:
            self.image_name, _ = QFileDialog.getOpenFileName(self, "open image", ".", "图像文件(*.jpg *.png)")
            pix = self.cv_to_pix(self.image_name, self.pic_show.geometry().width(), self.pic_show.geometry().height())
            self.pic_show.setPixmap(pix)
        except:
            msg_box = QMessageBox(QMessageBox.Warning, '警告', '请选择正确图片文件')
            msg_box.exec_()

    def set_save_path_func(self):
        try:
            self.save_path_text , _ = QFileDialog.getSaveFileName(self, "save txt", ".", "文本文件(*.txt)")
            self.save_path.setText(self.save_path_text)
        except:
            msg_box = QMessageBox(QMessageBox.Warning, '警告', '请选择保存正确的路径')
            msg_box.exec_()

    def set_words(self):
        if self.issetting.isChecked():

            string = self.words.text()
            chinese_char_map = {}
            with open("chinese_unicode_table.txt", 'r', encoding='UTF-8') as f:
                lines = f.readlines()
                for line in lines[6:]:  # 前6行是表头，去掉
                    line_info = line.strip().split()
                    # 处理后的数组第一个是文字，第7个是笔画数量
                    chinese_char_map[line_info[0]] = line_info[6]
            for char in string:
                if char.isascii():
                    msg_box = QMessageBox(QMessageBox.Warning, '警告', '请不要输入字母或数字')
                    msg_box.exec_()
                    self.issetting.setChecked(False)
                    return
                self.words_list.append((int(chinese_char_map[char]), char))
            if self.optimization.isChecked():
                self.words_list.append((50, '囖'))
                self.words_list.append((50, '囖'))
            self.words_list.sort(key=lambda x : x[0])
            self.words.setDisabled(True)
        else:
            self.words.setDisabled(False)
            self.words_list.clear()

    def generate_func(self):
        # try:
        if not self.issetting.isChecked():
            msg_box = QMessageBox(QMessageBox.Warning, '警告', '请选中需要的文字')
            msg_box.exec_()
        else:
            code = CodeImage(self.image_name, (self.pic_w.value(), self.pic_h.value()), self.words_list)
            code.code_image(self.save_path_text)
            msg_box = QMessageBox(QMessageBox.Information, '提示', '生成成功！')
            msg_box.exec_()
            if self.auto_open.isChecked():
                os.startfile(self.save_path_text)
        # except:
        #     msg_box = QMessageBox(QMessageBox.Warning, '警告', '生成失败！')
        #     msg_box.exec_()

    @staticmethod
    def cv_to_pix(path: str, w: int, h:int):
        img = Image.open(path)
        img = cv.cvtColor(np.asarray(img), cv.COLOR_RGB2BGR)
        img = cv.resize(img, (w, h))
        show = cv.cvtColor(img, cv.COLOR_BGR2RGB)  # 视频色彩转换回RGB，这样才是现实的颜色
        show_image = QtGui.QImage(show.data, show.shape[1], show.shape[0], show.shape[1] * 3,
                                  QtGui.QImage.Format_RGB888)  # 把读取到的视频数据变成QImage形式
        pix = QtGui.QPixmap.fromImage(show_image)
        return pix

class CodeImage:

    def __init__(self, path:str, size:(int, int),words:list[tuple]):
        self.image = cv.imread(path)
        self.image = cv.resize(self.image, size)
        self.image = cv.cvtColor(self.image, cv.COLOR_BGR2GRAY)
        self.words = words
        self.words.reverse()
        self.count = len(words)
        self.step = int(255 / (self.count - 1))

    def code_image(self, path):
        with open(path, 'w') as file:
            for row in self.image:
                for pix in row:
                    idx = np.floor(pix / self.step)
                    file.write(self.words[int(idx)][1])
                file.write('\n')

app = QApplication(sys.argv)
QApplication.setStyle(QStyleFactory.create('Fusion'))
w = TextPicture()
w.show()
app.exec_()

